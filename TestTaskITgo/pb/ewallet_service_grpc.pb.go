// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/ewallet_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EwalletServiceClient is the client API for EwalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EwalletServiceClient interface {
	CreateEwallet(ctx context.Context, in *CreateEwalletRequest, opts ...grpc.CallOption) (*CreateEwalletResponse, error)
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	Getlast(ctx context.Context, in *GetlastRequest, opts ...grpc.CallOption) (*GetlastResponse, error)
}

type ewalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEwalletServiceClient(cc grpc.ClientConnInterface) EwalletServiceClient {
	return &ewalletServiceClient{cc}
}

func (c *ewalletServiceClient) CreateEwallet(ctx context.Context, in *CreateEwalletRequest, opts ...grpc.CallOption) (*CreateEwalletResponse, error) {
	out := new(CreateEwalletResponse)
	err := c.cc.Invoke(ctx, "/EwalletService/CreateEwallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ewalletServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/EwalletService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ewalletServiceClient) Getlast(ctx context.Context, in *GetlastRequest, opts ...grpc.CallOption) (*GetlastResponse, error) {
	out := new(GetlastResponse)
	err := c.cc.Invoke(ctx, "/EwalletService/Getlast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EwalletServiceServer is the server API for EwalletService service.
// All implementations should embed UnimplementedEwalletServiceServer
// for forward compatibility
type EwalletServiceServer interface {
	CreateEwallet(context.Context, *CreateEwalletRequest) (*CreateEwalletResponse, error)
	Send(context.Context, *SendRequest) (*SendResponse, error)
	Getlast(context.Context, *GetlastRequest) (*GetlastResponse, error)
}

// UnimplementedEwalletServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEwalletServiceServer struct {
}

func (UnimplementedEwalletServiceServer) CreateEwallet(context.Context, *CreateEwalletRequest) (*CreateEwalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEwallet not implemented")
}
func (UnimplementedEwalletServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedEwalletServiceServer) Getlast(context.Context, *GetlastRequest) (*GetlastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getlast not implemented")
}

// UnsafeEwalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EwalletServiceServer will
// result in compilation errors.
type UnsafeEwalletServiceServer interface {
	mustEmbedUnimplementedEwalletServiceServer()
}

func RegisterEwalletServiceServer(s grpc.ServiceRegistrar, srv EwalletServiceServer) {
	s.RegisterService(&EwalletService_ServiceDesc, srv)
}

func _EwalletService_CreateEwallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEwalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EwalletServiceServer).CreateEwallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EwalletService/CreateEwallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EwalletServiceServer).CreateEwallet(ctx, req.(*CreateEwalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EwalletService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EwalletServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EwalletService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EwalletServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EwalletService_Getlast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetlastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EwalletServiceServer).Getlast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EwalletService/Getlast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EwalletServiceServer).Getlast(ctx, req.(*GetlastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EwalletService_ServiceDesc is the grpc.ServiceDesc for EwalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EwalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EwalletService",
	HandlerType: (*EwalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEwallet",
			Handler:    _EwalletService_CreateEwallet_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _EwalletService_Send_Handler,
		},
		{
			MethodName: "Getlast",
			Handler:    _EwalletService_Getlast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ewallet_service.proto",
}
